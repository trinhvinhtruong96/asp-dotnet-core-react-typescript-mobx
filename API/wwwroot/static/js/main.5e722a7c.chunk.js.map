{"version":3,"sources":["app/models/pagination.ts","app/models/profile.ts","app/models/activity.ts","app/api/agent.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextInput.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","Profile","user","username","displayName","image","Activity","init","Object","assign","ActivityFormValue","activity","id","undefined","title","category","description","date","city","venue","axios","defaults","baseURL","process","responseBody","response","interceptors","request","use","config","token","store","commonStore","headers","Authorization","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","requests","url","params","get","then","body","post","put","delete","agent","Activities","list","details","create","update","attend","Account","current","login","register","Profiles","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","runInAction","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","CommonStore","window","localStorage","getItem","appLoaded","setToken","setAppLoaded","setItem","removeItem","ProfileStore","profile","loadingProfile","uploading","followings","loadingFolowings","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","loadFollowings","actviveTab","UserStore","creds","modalStore","closeModel","logout","getUser","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextInput","props","useField","field","meta","Form","Field","touched","label","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","placeholder","categoryOptions","MyDateInput","helper","selected","useHistory","useParams","validationSchema","Yup","required","nullable","initialValues","enableReinitialize","onSubmit","uuid","handlerFormSubmit","handleSubmit","isValid","isSubmitting","dirty","className","autoComplete","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","type","email","password","setErrors","render","ValidationErrors","Message","err","i","isLoggedIn","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Tab","Pane","itemsPerRow","PhotoWidgetCropper","setCropper","imagePreview","preview","onInitialized","cropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","menu","menuPosition","onTabChange","activeIndex","Statistic","followingCount","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.5e722a7c.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}\r\n","import { User } from \"./user\";\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n","import { Profile } from \"./profile\";\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUserName: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValue) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValue {\r\n    id?: string = undefined;\r\n    title: string = \"\";\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date: Date | null = null;\r\n    city: string = \"\";\r\n    venue: string = \"\";\r\n\r\n    constructor(activity?: ActivityFormValue) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}\r\n","import { PaginatedResult } from \"./../models/pagination\";\r\nimport { Photo, Profile } from \"./../models/profile\";\r\nimport { UserFormValue } from \"./../models/user\";\r\nimport { store } from \"./../stores/store\";\r\nimport { Activity, ActivityFormValue } from \"./../models/activity\";\r\nimport axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../../index\";\r\nimport { User } from \"../models/user\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n};\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(\r\n    async (response) => {\r\n        if (process.env.NODE_ENV === \"development\") {\r\n            await sleep(1000);\r\n        }\r\n        const pagination = response.headers[\"pagination\"];\r\n\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(\r\n                response.data,\r\n                JSON.parse(pagination)\r\n            );\r\n\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n\r\n        return response;\r\n    },\r\n    (error: AxiosError) => {\r\n        const { data, status, config } = error.response!;\r\n        switch (status) {\r\n            case 400:\r\n                if (typeof data === \"string\") {\r\n                    toast.error(data);\r\n                }\r\n                if (\r\n                    config.method === \"get\" &&\r\n                    data.errors.hasOwnProperty(\"id\")\r\n                ) {\r\n                    history.push(\"/not-found\");\r\n                }\r\n                if (data.errors) {\r\n                    const modalStateErrors = [];\r\n\r\n                    for (const key in data.errors) {\r\n                        if (data.errors[key]) {\r\n                            modalStateErrors.push(data.errors[key]);\r\n                        }\r\n                    }\r\n                    throw modalStateErrors.flat();\r\n                }\r\n                break;\r\n            case 401:\r\n                toast.error(\"unauthorized\");\r\n                break;\r\n            case 404:\r\n                history.push(\"/not-found\");\r\n                break;\r\n            case 500:\r\n                store.commonStore.setServerError(data);\r\n                history.push(\"/server-error\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nconst requests = {\r\n    get: <T>(url: string, params?: {}) =>\r\n        axios.get<T>(url, { params }).then(responseBody),\r\n    post: <T>(url: string, body: {}) =>\r\n        axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) =>\r\n        axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) =>\r\n        requests.get<PaginatedResult<Activity[]>>(\"/activities\", params),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValue) =>\r\n        requests.post<void>(\"activities\", activity),\r\n    update: (activity: ActivityFormValue) =>\r\n        requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n};\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>(\"/account\"),\r\n    login: (user: UserFormValue) => requests.post<User>(\"/account/login\", user),\r\n    register: (user: UserFormValue) =>\r\n        requests.post<User>(\"/account/register\", user),\r\n};\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append(\"File\", file);\r\n        return axios.post<Photo>(\"photos\", formData, {\r\n            headers: { \"Content-type\": \"multipart/form-data\" },\r\n        });\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateFollowing: (username: string) =>\r\n        requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n};\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n};\r\n\r\nexport default agent;\r\n","import { Pagination, PagingParams } from \"./../models/pagination\";\r\nimport { Profile } from \"./../models/profile\";\r\nimport { store } from \"./store\";\r\nimport { format } from \"date-fns\";\r\nimport { Activity, ActivityFormValue } from \"./../models/activity\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\n\r\nclass ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set(\"all\", true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        );\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    };\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== \"startDate\") this.predicate.delete(key);\r\n            });\r\n        };\r\n\r\n        switch (predicate) {\r\n            case \"all\":\r\n                resetPredicate();\r\n                this.predicate.set(\"all\", true);\r\n                break;\r\n            case \"isGoing\":\r\n                resetPredicate();\r\n                this.predicate.set(\"isGoing\", true);\r\n                break;\r\n            case \"isHost\":\r\n                resetPredicate();\r\n                this.predicate.set(\"isHost\", true);\r\n                break;\r\n            case \"startDate\":\r\n                this.predicate.delete(\"startDate\");\r\n                this.predicate.set(\"startDate\", value);\r\n                break;\r\n        }\r\n    };\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\r\n        params.append(\"pageSize\", this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === \"startDate\") {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort(\r\n            (a, b) => a.date!.getTime() - b.date!.getTime()\r\n        );\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, \"dd MMM yyyy\");\r\n                activities[date] = activities[date]\r\n                    ? [...activities[date], activity]\r\n                    : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        );\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            runInAction(() => {\r\n                result.data.forEach((activity) => {\r\n                    this.setActivity(activity);\r\n                });\r\n                this.setPagination(result.pagination);\r\n                this.setLoadingInitial(false);\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: activityStore.ts ~ line 20 ~ ActivityStore ~ loadActivities= ~ error\",\r\n                error\r\n            );\r\n            runInAction(() => {\r\n                this.setLoadingInitial(false);\r\n            });\r\n        }\r\n    };\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    };\r\n\r\n    loadActivity = async (id: string): Promise<Activity | undefined> => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                runInAction(() => {\r\n                    this.setActivity(activity!);\r\n                    this.selectedActivity = activity;\r\n                    this.setLoadingInitial(false);\r\n                });\r\n                return activity;\r\n            } catch (error) {\r\n                runInAction(() => {\r\n                    console.log(\r\n                        \"🚀 ~ file: activityStore.ts ~ line 52 ~ ActivityStore ~ loadActivity= ~ error\",\r\n                        error\r\n                    );\r\n                    this.setLoadingInitial(false);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                (a) => a.username === user.username\r\n            );\r\n            activity.isHost = activity.hostUserName === user.username;\r\n            activity.host = activity.attendees?.find(\r\n                (x) => x.username === activity.hostUserName\r\n            );\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    };\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    };\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    };\r\n\r\n    createActivity = async (activity: ActivityFormValue) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n                // this.loadActivities();\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: activityStore.ts ~ line 64 ~ ActivityStore ~ createActivity= ~ error\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    updateActivity = async (activity: ActivityFormValue) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {\r\n                        ...this.getActivity(activity.id),\r\n                        ...activity,\r\n                    };\r\n                    this.activityRegistry.set(\r\n                        activity.id,\r\n                        updatedActivity as Activity\r\n                    );\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n\r\n                // this.loadActivities();\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: activityStore.ts ~ line 64 ~ ActivityStore ~ createActivity= ~ error\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: activityStore.ts ~ line 102 ~ ActivityStore ~ deleteActivity ~ error\",\r\n                error\r\n            );\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(\r\n                            (a) => a.username !== user?.username\r\n                        );\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(\r\n                    this.selectedActivity!.id,\r\n                    this.selectedActivity!\r\n                );\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: activityStore.ts ~ line 181 ~ ActivityStore ~ updateAttendance= ~ error\",\r\n                error\r\n            );\r\n        } finally {\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled =\r\n                    !this.selectedActivity?.isCancelled;\r\n            });\r\n            this.activityRegistry.set(\r\n                this.selectedActivity!.id,\r\n                this.selectedActivity!\r\n            );\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: activityStore.ts ~ line 219 ~ ActivityStore ~ cancelActivityToggle= ~ error\",\r\n                error\r\n            );\r\n        } finally {\r\n            this.loading = false;\r\n        }\r\n    };\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    };\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach((activity) => {\r\n            activity.attendees.forEach((attendee) => {\r\n                if (attendee.username === username) {\r\n                    attendee.following\r\n                        ? attendee.followersCount--\r\n                        : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\nexport default ActivityStore;\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"./../models/serverError\";\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem(\"jwt\");\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            (token) => {\r\n                if (token) {\r\n                    window.localStorage.setItem(\"jwt\", token);\r\n                } else {\r\n                    window.localStorage.removeItem(\"jwt\");\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setServerError(error: ServerError) {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    };\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    };\r\n}\r\n","import { store } from \"./store\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile } from \"./../models/profile\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFolowings = false;\r\n    activeTab = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            (actviveTab) => {\r\n                if (this.activeTab === 3 || actviveTab === 4) {\r\n                    const predicate =\r\n                        this.activeTab === 3 ? \"followers\" : \"following\";\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    };\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user?.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: profileStore.ts ~ line 16 ~ ProfileStore ~ loadProfile= ~ error\",\r\n                error\r\n            );\r\n            runInAction(() => (this.loadingProfile = false));\r\n        }\r\n    };\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: profileStore.ts ~ line 49 ~ ProfileStore ~ uploadPhoto= ~ error\",\r\n                error\r\n            );\r\n            runInAction(() => (this.uploading = false));\r\n        }\r\n    };\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find((p) => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find((p) => p.id === photo.id)!.isMain =\r\n                        true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(\r\n                        (p) => p.id !== photo.id\r\n                    );\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: profileStore.ts ~ line 92 ~ ProfileStore ~ deletePhoto ~ error\",\r\n                error\r\n            );\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n\r\n            runInAction(() => {\r\n                if (\r\n                    this.profile &&\r\n                    this.profile.username !== store.userStore.user?.username &&\r\n                    this.profile.username === username\r\n                ) {\r\n                    following\r\n                        ? this.profile.followersCount++\r\n                        : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n\r\n                if (\r\n                    this.profile &&\r\n                    this.profile.username === store.userStore.user?.username\r\n                ) {\r\n                    following\r\n                        ? this.profile.followersCount++\r\n                        : this.profile.followersCount--;\r\n                }\r\n\r\n                this.followings.forEach((profile) => {\r\n                    if (profile.username === username) {\r\n                        profile.following\r\n                            ? profile.followersCount--\r\n                            : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                });\r\n\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: profileStore.ts ~ line 111 ~ ProfileStore ~ updateFollowing= ~ error\",\r\n                error\r\n            );\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFolowings = true;\r\n\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(\r\n                this.profile!.username,\r\n                predicate\r\n            );\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFolowings = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: profileStore.ts ~ line 149 ~ ProfileStore ~ loadFollowings= ~ error\",\r\n                error\r\n            );\r\n            runInAction(() => {\r\n                this.loadingFolowings = false;\r\n            });\r\n        }\r\n    };\r\n}\r\n","import { history } from \"./../../index\";\r\nimport { store } from \"./store\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValue } from \"./../models/user\";\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValue) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n            history.push(\"/activities\");\r\n            store.modalStore.closeModel();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem(\"jwt\");\r\n        this.user = null;\r\n        history.push(\"/\");\r\n    };\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => (this.user = user));\r\n        } catch (error) {\r\n            console.log(\r\n                \"🚀 ~ file: userStore.ts ~ line 41 ~ UserStore ~ getUser= ~ error\",\r\n                error\r\n            );\r\n        }\r\n    };\r\n\r\n    register = async (creds: UserFormValue) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n            history.push(\"/activities\");\r\n            store.modalStore.closeModel();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    };\r\n}\r\n","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommnentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommnentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommnentStore(),\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null,\r\n    };\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    };\r\n\r\n    closeModel = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    };\r\n}\r\n","import { store } from \"./store\";\r\nimport { ChatComment } from \"./../models/comment\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport {\r\n    HubConnection,\r\n    HubConnectionBuilder,\r\n    LogLevel,\r\n} from \"@microsoft/signalr\";\r\n\r\nexport default class CommnentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(\r\n                    process.env.REACT_APP_CHAT_URL +\r\n                        \"?activityId=\" +\r\n                        activityId,\r\n                    { accessTokenFactory: () => store.userStore.user?.token! }\r\n                )\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection\r\n                .start()\r\n                .catch((error) =>\r\n                    console.log(\"Error establishing the connetion: \", error)\r\n                );\r\n\r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach((comment) => {\r\n                        comment.createdAt = new Date(comment.createdAt + \"Z\");\r\n                    });\r\n                    this.comments = comments;\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection\r\n            ?.stop()\r\n            .catch((error) => console.log(\"Error stopping connetion: \", error));\r\n    };\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    };\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        } catch (error) {}\r\n    };\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nconst NavBar: React.FC = () => {\r\n    const {\r\n        userStore: { user, logout },\r\n    } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to=\"/\" exact header>\r\n                    <img\r\n                        src=\"/assets/logo.png\"\r\n                        alt=\"logo\"\r\n                        style={{ marginRight: 10 }}\r\n                    />\r\n                    Reactivities\r\n                </Menu.Item>\r\n\r\n                <Menu.Item as={NavLink} to=\"/activities\" name=\"Activities\" />\r\n\r\n                <Menu.Item as={NavLink} to=\"/errors\" name=\"Errors\" />\r\n\r\n                <Menu.Item>\r\n                    <Button\r\n                        as={NavLink}\r\n                        to=\"/createActivity\"\r\n                        positive\r\n                        content=\"Create Activity\"\r\n                    />\r\n                </Menu.Item>\r\n\r\n                <Menu.Item position=\"right\">\r\n                    <Image\r\n                        src={user?.image || \"/assets/user.png\"}\r\n                        avatar\r\n                        spaced=\"right\"\r\n                    />\r\n                    <Dropdown pointing=\"top left\" text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item\r\n                                as={Link}\r\n                                to={`/profiles/${user?.username}`}\r\n                                text=\"My Profile\"\r\n                                icon=\"user\"\r\n                            />\r\n                            <Dropdown.Item\r\n                                onClick={logout}\r\n                                text=\"Logout\"\r\n                                icon=\"power\"\r\n                            />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    );\r\n};\r\n\r\nexport default observer(NavBar);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport interface ActivityFilterProps {}\r\n\r\nconst ActivityFilter: React.FC<ActivityFilterProps> = () => {\r\n    const {\r\n        activityStore: { predicate, setPredicate },\r\n    } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu\r\n                vertical\r\n                size=\"large\"\r\n                style={{ width: \"100%\", marginTop: 25 }}\r\n            >\r\n                <Header icon=\"filter\" attached color=\"teal\" content=\"Filters\" />\r\n                <Menu.Item\r\n                    content=\"All Activities\"\r\n                    active={predicate.has(\"all\")}\r\n                    onClick={() => setPredicate(\"all\", \"true\")}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has(\"isGoing\")}\r\n                    onClick={() => setPredicate(\"isGoing\", \"true\")}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has(\"isHost\")}\r\n                    onClick={() => setPredicate(\"isHost\", \"true\")}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate(\"startDate\", date)}\r\n                value={predicate.get(\"startDate\") || new Date()}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityFilter);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Reveal, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport interface Props {\r\n    profile: Profile;\r\n}\r\n\r\nconst FollowButton: React.FC<Props> = ({ profile }) => {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    const handleFollow = (e: SyntheticEvent, username: string) => {\r\n        e.preventDefault();\r\n        profile.following\r\n            ? updateFollowing(username, false)\r\n            : updateFollowing(username, true);\r\n    };\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    return (\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{ width: \"100%\" }}>\r\n                <Button\r\n                    fluid\r\n                    color=\"teal\"\r\n                    content={profile.following ? \"Following\" : \"Not following\"}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: \"100%\" }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? \"red\" : \"green\"}\r\n                    content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n};\r\n\r\nexport default observer(FollowButton);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\nexport interface Props {\r\n    profile: Profile;\r\n}\r\n\r\nconst ProfileCard: React.FC<Props> = ({ profile }) => {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || \"/assets/user.png\"} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name=\"user\" />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileCard);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\nexport interface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nconst ActivityListItemAttendee: React.FC<Props> = ({ attendees }) => {\r\n    const styles = {\r\n        borderColor: \"orange\",\r\n        borderWidth: 3,\r\n    };\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map((attendee) => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item\r\n                            as={Link}\r\n                            to={`/profiles/${attendee.username}`}\r\n                        >\r\n                            <Image\r\n                                size=\"mini\"\r\n                                circular\r\n                                src={attendee.image || \"/assets/user.png\"}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <ProfileCard profile={attendee} />\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityListItemAttendee);\r\n","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface ActivityListItemProps {\r\n    activity: Activity;\r\n}\r\n\r\nconst ActivityListItem: React.FC<ActivityListItemProps> = ({ activity }) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        attached=\"top\"\r\n                        color=\"red\"\r\n                        content=\"Cancelled\"\r\n                        style={{ textAlign: \"center\" }}\r\n                    />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image\r\n                            style={{ marginBottom: 3 }}\r\n                            size=\"tiny\"\r\n                            circular\r\n                            src={activity.host?.image || \"/assets/user.png\"}\r\n                        />\r\n                        <Item.Content>\r\n                            <Item.Header\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                            >\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by{\" \"}\r\n                                <Link\r\n                                    to={`/profiles/${activity.host?.username}`}\r\n                                >\r\n                                    {activity.host?.displayName}\r\n                                </Link>\r\n                                {activity.isHost && (\r\n                                    <Item.Description>\r\n                                        <Label basic color=\"orange\">\r\n                                            You are hosting this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                )}\r\n                                {activity.isGoing && !activity.isHost && (\r\n                                    <Item.Description>\r\n                                        <Label basic color=\"green\">\r\n                                            You are going to this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                )}\r\n                            </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name=\"clock\" />{\" \"}\r\n                    {format(activity.date!, \"dd MMM yyyy h:mm aa\")}\r\n                    <Icon name=\"marker\" /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color=\"teal\"\r\n                    floated=\"right\"\r\n                    content=\"View\"\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default ActivityListItem;\r\n","import { Fragment } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nconst ActivityList = () => {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color=\"teal\">\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map((activity) => (\r\n                        <ActivityListItem\r\n                            key={activity.id}\r\n                            activity={activity}\r\n                        />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityList);\r\n","import React, { Fragment } from \"react\";\r\nimport { Segment, Button, Placeholder } from \"semantic-ui-react\";\r\n\r\nconst ActivityListItemPlaceholder = () => {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button\r\n                            disabled\r\n                            color=\"blue\"\r\n                            floated=\"right\"\r\n                            content=\"View\"\r\n                        />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ActivityListItemPlaceholder;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilter from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nconst ActivityDashboard = () => {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } =\r\n        activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const handleGetNext = () => {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => {\r\n            setLoadingNext(false);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width=\"10\">\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={\r\n                            !loadingNext &&\r\n                            !!pagination &&\r\n                            pagination.currentPage < pagination.totalPages\r\n                        }\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilter />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDashboard);\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean,\r\n    content?: string\r\n}\r\n\r\nconst LoadingComponent: React.FC<Props> = ({ inverted = true, content = 'Loading...' }) => {\r\n\r\n    return (\r\n        <Dimmer active={true} inverted={inverted} >\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default LoadingComponent;","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\nexport interface props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string\r\n}\r\n\r\nconst MyTextInput: React.FC<props> = (props) => {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MyTextInput;","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\nexport interface props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows?: number,\r\n    label?: string\r\n}\r\n\r\nconst MyTextArea: React.FC<props> = (props) => {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MyTextArea;","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\nexport interface props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string\r\n}\r\n\r\nconst MySelectInput: React.FC<props> = (props) => {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MySelectInput;","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nconst MyDateInput: React.FC<Partial<ReactDatePickerProps>> = (props) => {\r\n    const [field, meta, helper] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helper.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}\r\n\r\nexport default MyDateInput;","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValue } from \"../../../app/models/activity\";\r\n\r\nconst ActivityForm = () => {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } =\r\n        activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const [activity, setActivity] = useState<ActivityFormValue>(\r\n        new ActivityFormValue()\r\n    );\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"The activity title is required\"),\r\n        description: Yup.string().required(\r\n            \"The activity description is required\"\r\n        ),\r\n        category: Yup.string().required(\"The activity category is required\"),\r\n        date: Yup.string().required(\"The activity date is required\").nullable(),\r\n        city: Yup.string().required(\"The activity description is required\"),\r\n        venue: Yup.string().required(\"The activity venue is required\"),\r\n    });\r\n\r\n    const handlerFormSubmit = (activity: ActivityFormValue) => {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid(),\r\n            };\r\n            createActivity(newActivity).then(() => {\r\n                history.push(`/activities/${newActivity.id}`);\r\n            });\r\n        } else {\r\n            updateActivity(activity).then(() =>\r\n                history.push(`/activities/${activity.id}`)\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id).then((activity) =>\r\n                setActivity(new ActivityFormValue(activity))\r\n            );\r\n        }\r\n    }, [id, loadActivity]);\r\n\r\n    if (loadingInitial)\r\n        return <LoadingComponent content=\"Loading activity...\" />;\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content=\"Activity Details\" sub color=\"teal\" />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                initialValues={activity}\r\n                enableReinitialize\r\n                onSubmit={(values) => handlerFormSubmit(values)}\r\n            >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form\r\n                        className=\"ui form\"\r\n                        onSubmit={handleSubmit}\r\n                        autoComplete=\"off\"\r\n                    >\r\n                        <MyTextInput placeholder=\"Title\" name=\"title\" />\r\n                        <MyTextArea\r\n                            rows={3}\r\n                            placeholder=\"Description\"\r\n                            name=\"description\"\r\n                        />\r\n                        <MySelectInput\r\n                            options={categoryOptions}\r\n                            placeholder=\"Category\"\r\n                            name=\"category\"\r\n                        />\r\n                        <MyDateInput\r\n                            placeholderText=\"Date\"\r\n                            name=\"date\"\r\n                            showTimeSelect\r\n                            timeCaption=\"time\"\r\n                            dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                        />\r\n                        <Header content=\"Location Details\" sub color=\"teal\" />\r\n                        <MyTextInput placeholder=\"City\" name=\"city\" />\r\n                        <MyTextInput placeholder=\"Venue\" name=\"venue\" />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated=\"right\"\r\n                            positive\r\n                            type=\"submit\"\r\n                            content=\"Submit\"\r\n                        />\r\n                        <Button\r\n                            as={Link}\r\n                            to=\"/activities\"\r\n                            floated=\"right\"\r\n                            type=\"button\"\r\n                            content=\"Cancel\"\r\n                        />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityForm);\r\n","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport interface LoginFormProps {}\r\n\r\nconst LoginForm: React.FC<LoginFormProps> = () => {\r\n    const { userStore } = useStore();\r\n    const { login } = userStore;\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: \"\", password: \"\", error: null }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                login(values).catch((error) =>\r\n                    setErrors({ error: \"Invalid email or password\" })\r\n                )\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form\r\n                    className=\"ui form\"\r\n                    onSubmit={handleSubmit}\r\n                    // autoComplete=\"off\"\r\n                >\r\n                    <Header\r\n                        as=\"h2\"\r\n                        content=\"Login to Reactivities\"\r\n                        color=\"teal\"\r\n                        textAlign=\"center\"\r\n                    />\r\n                    <MyTextInput placeholder=\"Email\" name=\"email\" />\r\n                    <MyTextInput\r\n                        placeholder=\"Password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                    />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={() => (\r\n                            <Label\r\n                                style={{ marginBottom: 10 }}\r\n                                basic\r\n                                color=\"red\"\r\n                                content={errors.error}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <Button\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content=\"Login\"\r\n                        type=\"submit\"\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default observer(LoginForm);\r\n","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface ValidationErrorsProps {\r\n    errors: any;\r\n}\r\n\r\nconst ValidationErrors: React.FC<ValidationErrorsProps> = ({ errors }) => {\r\n    return (\r\n        <Message error>\r\n            {errors &&\r\n                errors.map((err: any, i: any) => (\r\n                    <Message.Item key={i}>{err}</Message.Item>\r\n                ))}\r\n        </Message>\r\n    );\r\n};\r\n\r\nexport default ValidationErrors;\r\n","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from \"yup\";\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport interface Props {}\r\n\r\nconst RegisterForm: React.FC<Props> = () => {\r\n    const { userStore } = useStore();\r\n    const { register } = userStore;\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: \"\",\r\n                username: \"\",\r\n                email: \"\",\r\n                password: \"\",\r\n                error: null,\r\n            }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                register(values).catch((error) => setErrors({ error }))\r\n            }\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form\r\n                    className=\"ui form error\"\r\n                    onSubmit={handleSubmit}\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <Header\r\n                        as=\"h2\"\r\n                        content=\"Sign up to Reactivities\"\r\n                        color=\"teal\"\r\n                        textAlign=\"center\"\r\n                    />\r\n                    <MyTextInput\r\n                        placeholder=\"Display Name\"\r\n                        name=\"displayName\"\r\n                    />\r\n                    <MyTextInput placeholder=\"Username\" name=\"username\" />\r\n                    <MyTextInput placeholder=\"Email\" name=\"email\" />\r\n                    <MyTextInput\r\n                        placeholder=\"Password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                    />\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={() => (\r\n                            <ValidationErrors errors={errors.error} />\r\n                        )}\r\n                    />\r\n                    <Button\r\n                        disabled={!isValid || !dirty}\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content=\"Register\"\r\n                        type=\"submit\"\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default observer(RegisterForm);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nconst HomePage = () => {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as=\"h1\" inverted>\r\n                    <Image\r\n                        size=\"massive\"\r\n                        src=\"/assets/logo.png\"\r\n                        alt=\"logo\"\r\n                        style={{ marginBottom: 12 }}\r\n                    />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header\r\n                            as=\"h2\"\r\n                            inverted\r\n                            content=\"Welcome to Reactivities\"\r\n                        />\r\n                        <Button as={Link} to=\"./activities\" size=\"huge\">\r\n                            Go to Activities\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button\r\n                            onClick={() => modalStore.openModal(<LoginForm />)}\r\n                            size=\"huge\"\r\n                        >\r\n                            Login!\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() =>\r\n                                modalStore.openModal(<RegisterForm />)\r\n                            }\r\n                            size=\"huge\"\r\n                        >\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(HomePage);\r\n","import { Formik, Form, Field, FieldProps } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, Header, Comment, Loader } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from \"yup\";\r\nimport { formatDistanceToNow } from \"date-fns/esm\";\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nconst ActivityDetailedChat: React.FC<Props> = ({ activityId }) => {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        };\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign=\"center\"\r\n                attached=\"top\"\r\n                inverted\r\n                color=\"teal\"\r\n                style={{ border: \"none\" }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) => {\r\n                        commentStore.addComment(values).then(() => resetForm());\r\n                    }}\r\n                    initialValues={{ body: \"\" }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required(),\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className=\"ui form\">\r\n                            <Field name=\"body\">\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: \"relative\" }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder=\"Enter your comment (Enter to submit, SHIFT + enter for new line)\"\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={(e) => {\r\n                                                if (\r\n                                                    e.key === \"Enter\" &&\r\n                                                    e.shiftKey\r\n                                                ) {\r\n                                                    return;\r\n                                                }\r\n\r\n                                                if (\r\n                                                    e.key === \"Enter\" &&\r\n                                                    !e.shiftKey\r\n                                                ) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                            {/* <MyTextArea\r\n                                    placeholder=\"Add comment\"\r\n                                    name=\"body\"\r\n                                    rows={2}\r\n                                />\r\n                                <Button\r\n                                    loading={isSubmitting}\r\n                                    disabled={isSubmitting || !isValid}\r\n                                    content=\"Add Reply\"\r\n                                    labelPosition=\"left\"\r\n                                    icon=\"edit\"\r\n                                    primary\r\n                                    type=\"submit\"\r\n                                    floated=\"right\"\r\n                                /> */}\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map((comment) => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar\r\n                                src={comment.image || \"/assets/user.png\"}\r\n                            />\r\n                            <Comment.Content>\r\n                                <Comment.Author\r\n                                    as={Link}\r\n                                    to={`/profiles/${comment.username}`}\r\n                                >\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>\r\n                                        {formatDistanceToNow(comment.createdAt)}{\" \"}\r\n                                        ago\r\n                                    </div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text\r\n                                    style={{ whiteSpace: \"pre-wrap\" }}\r\n                                >\r\n                                    {comment.body}\r\n                                </Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedChat);\r\n","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Item, Segment, Image, Label } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nconst activityImageStyle = {\r\n    filter: \"brightness(30%)\",\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: \"absolute\",\r\n    bottom: \"5%\",\r\n    left: \"5%\",\r\n    width: \"100%\",\r\n    height: \"auto\",\r\n    color: \"white\",\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nconst ActivityDetailedHeader: React.FC<Props> = ({ activity }) => {\r\n    const {\r\n        activityStore: { updateAttendance, loading, cancelActivityToggle },\r\n    } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            zIndex: 1000,\r\n                            left: -14,\r\n                            top: 20,\r\n                        }}\r\n                        ribbon\r\n                        color=\"red\"\r\n                        content=\"Cancelled\"\r\n                    />\r\n                )}\r\n                <Image\r\n                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                    fluid\r\n                    style={activityImageStyle}\r\n                />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size=\"huge\"\r\n                                    content={activity.title}\r\n                                    style={{ color: \"white\" }}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by{\" \"}\r\n                                    <strong>\r\n                                        <Link\r\n                                            to={`/profiles/${activity.host?.username}`}\r\n                                        >\r\n                                            {activity.host?.displayName}\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached=\"bottom\">\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? \"green\" : \"red\"}\r\n                            floated=\"left\"\r\n                            basic\r\n                            content={\r\n                                activity.isCancelled\r\n                                    ? \"Re-activate Activity\"\r\n                                    : \"Cancel Activity\"\r\n                            }\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button\r\n                            disabled={activity.isCancelled}\r\n                            as={Link}\r\n                            to={`/manage/${activity.id}`}\r\n                            color=\"orange\"\r\n                            floated=\"right\"\r\n                        >\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>\r\n                        Cancel attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button\r\n                        disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendance}\r\n                        color=\"teal\"\r\n                    >\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedHeader);\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\n\r\nconst ActivityDetailedInfo: React.FC<Props> = ({ activity }) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n}\r\n\r\nexport default observer(ActivityDetailedInfo);","import React from \"react\";\r\nimport { Segment, List, Label, Item, Image } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nconst ActivityDetailedSidebar: React.FC<Props> = ({\r\n    activity: { attendees, host },\r\n}) => {\r\n    if (!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign=\"center\"\r\n                style={{ border: \"none\" }}\r\n                attached=\"top\"\r\n                secondary\r\n                inverted\r\n                color=\"teal\"\r\n            >\r\n                {attendees.length}{\" \"}\r\n                {attendees.length === 1 ? \" Person\" : \"People\"} Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map((attendee) => (\r\n                        <Item\r\n                            key={attendee.username}\r\n                            style={{ position: \"relative\" }}\r\n                        >\r\n                            {attendee.username === host?.username && (\r\n                                <Label\r\n                                    style={{ position: \"absolute\" }}\r\n                                    color=\"orange\"\r\n                                    ribbon=\"right\"\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n\r\n                            <Image\r\n                                size=\"tiny\"\r\n                                src={attendee.image || \"/assets/user.png\"}\r\n                            />\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Item.Header as=\"h3\">\r\n                                    <Link to={`/profiles/${attendee.username}`}>\r\n                                        {attendee.displayName}\r\n                                    </Link>\r\n                                </Item.Header>\r\n                                {attendee.following && (\r\n                                    <Item.Extra style={{ color: \"orange\" }}>\r\n                                        Following\r\n                                    </Item.Extra>\r\n                                )}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nconst ActivityDetails = () => {\r\n    const { activityStore } = useStore();\r\n    const {\r\n        selectedActivity: activity,\r\n        loadActivity,\r\n        loadingInitial,\r\n        clearSelectedActivity,\r\n    } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id);\r\n        }\r\n\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetails);\r\n","import React, { useState } from \"react\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport ValidationErrors from \"./ValidationErrors\";\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios\r\n            .get(baseUrl + \"buggy/not-found\")\r\n            .catch((err) => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios\r\n            .get(baseUrl + \"buggy/bad-request\")\r\n            .catch((err) => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios\r\n            .get(baseUrl + \"buggy/server-error\")\r\n            .catch((err) => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios\r\n            .get(baseUrl + \"buggy/unauthorised\")\r\n            .catch((err) => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios\r\n            .get(baseUrl + \"activities/notaguid\")\r\n            .catch((err) => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + \"activities\", {}).catch((err) => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as=\"h1\" content=\"Test Error component\" />\r\n            <Segment>\r\n                <Button.Group widths=\"7\">\r\n                    <Button\r\n                        onClick={handleNotFound}\r\n                        content=\"Not Found\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleBadRequest}\r\n                        content=\"Bad Request\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleValidationError}\r\n                        content=\"Validation Error\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleServerError}\r\n                        content=\"Server Error\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleUnauthorised}\r\n                        content=\"Unauthorised\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleBadGuid}\r\n                        content=\"Bad Guid\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && <ValidationErrors errors={errors} />}\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst ServerError = () => {\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h2' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default observer(ServerError);","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nconst ModalContainer = () => {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal\r\n            open={modalStore.modal.open}\r\n            onClose={modalStore.closeModel}\r\n            size=\"mini\"\r\n        >\r\n            <Modal.Content>{modalStore.modal.body}</Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default observer(ModalContainer);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport interface Props {}\r\n\r\nconst ProfileFollowings: React.FC<Props> = () => {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFolowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFolowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated=\"left\"\r\n                        icon=\"user\"\r\n                        content={\r\n                            activeTab === 3\r\n                                ? `People following ${profile?.displayName}`\r\n                                : `People ${profile?.displayName} is following `\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map((profile) => (\r\n                            <ProfileCard\r\n                                key={profile.username}\r\n                                profile={profile}\r\n                            />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileFollowings);\r\n","import React from \"react\";\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport { Cropper } from \"react-cropper\";\r\n\r\nexport interface Prop {\r\n    setCropper: (cropper: Cropper) => void;\r\n    imagePreview: string;\r\n}\r\n\r\nconst PhotoWidgetCropper: React.FC<Prop> = ({ setCropper, imagePreview }) => {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            preview=\".img-preview\"\r\n            onInitialized={(cropper) => setCropper(cropper)}\r\n            style={{ height: 200, width: \"100%\" }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetCropper;\r\n","import React, { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\n\r\nexport interface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nconst PhotoWidgetDropzone: React.FC<Props> = ({ setFiles }) => {\r\n    const dzStyles = {\r\n        border: \"dashed 3px #eee\",\r\n        borderColor: \"#eee\",\r\n        borderRadius: 5,\r\n        paddingTop: 30,\r\n        textAlign: \"center\" as \"center\",\r\n        height: 200,\r\n    };\r\n\r\n    const dzActive = {\r\n        borderColor: \"green\",\r\n    };\r\n\r\n    const onDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file: any) => ({\r\n                    ...file,\r\n                    preview: URL.createObjectURL(file),\r\n                }))\r\n            );\r\n        },\r\n        [setFiles]\r\n    );\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n        onDrop,\r\n    });\r\n\r\n    return (\r\n        <div\r\n            {...getRootProps()}\r\n            style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}\r\n        >\r\n            <input {...getInputProps()} />\r\n            <Icon name=\"upload\" size=\"huge\" />\r\n            <Header content=\"Drop image here\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetDropzone;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\nexport interface Props {\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nconst PhotoUploadWidget: React.FC<Props> = ({ loading, uploadPhoto }) => {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    const onCrop = () => {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob((blob) => uploadPhoto(blob!));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        };\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content=\"Step 1 - Add Photo\" />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content=\"Step 2 - Resize Image\" />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper\r\n                        setCropper={setCropper}\r\n                        imagePreview={files[0].preview}\r\n                    />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content=\"Step 3 - Preview & Upload\" />\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div\r\n                            className=\"img-preview\"\r\n                            style={{ minHeight: 200, overflow: \"hidden\" }}\r\n                        ></div>\r\n                        <Button.Group widths={2}>\r\n                            <Button\r\n                                loading={loading}\r\n                                onClick={onCrop}\r\n                                positive\r\n                                icon=\"check\"\r\n                            />\r\n                            <Button\r\n                                disabled={loading}\r\n                                onClick={() => setFiles([])}\r\n                                icon=\"close\"\r\n                            />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PhotoUploadWidget;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport interface Props {\r\n    profile: Profile;\r\n}\r\n\r\nconst ProfilePhotos: React.FC<Props> = ({ profile }) => {\r\n    const {\r\n        profileStore: {\r\n            isCurrentUser,\r\n            uploadPhoto,\r\n            uploading,\r\n            loading,\r\n            setMainPhoto,\r\n            deletePhoto,\r\n        },\r\n    } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState(\"\");\r\n\r\n    const handlePhotoUpload = (file: Blob) => {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    };\r\n\r\n    const handleSetMainPhoto = (\r\n        photo: Photo,\r\n        e: SyntheticEvent<HTMLButtonElement>\r\n    ) => {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    };\r\n\r\n    const handleDeletePhoto = (\r\n        photo: Photo,\r\n        e: SyntheticEvent<HTMLButtonElement>\r\n    ) => {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated=\"right\"\r\n                            basic\r\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget\r\n                            uploadPhoto={handlePhotoUpload}\r\n                            loading={uploading}\r\n                        />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map((photo) => (\r\n                                <Card key={photo.id}>\r\n                                    <Image\r\n                                        src={photo.url || \"/assets/user.png\"}\r\n                                    />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"green\"\r\n                                                content=\"main\"\r\n                                                name={\"main\" + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={\r\n                                                    target ===\r\n                                                        \"main\" + photo.id &&\r\n                                                    loading\r\n                                                }\r\n                                                onClick={(e) =>\r\n                                                    handleSetMainPhoto(photo, e)\r\n                                                }\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"red\"\r\n                                                icon=\"trash\"\r\n                                                loading={\r\n                                                    target === photo.id &&\r\n                                                    loading\r\n                                                }\r\n                                                onClick={(e) =>\r\n                                                    handleDeletePhoto(photo, e)\r\n                                                }\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\nexport interface Props {\r\n    profile: Profile;\r\n}\r\n\r\nconst ProfileContent: React.FC<Props> = ({ profile }) => {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: \"About\", render: () => <Tab.Pane>About Content</Tab.Pane> },\r\n        {\r\n            menuItem: \"Photos\",\r\n            render: () => <ProfilePhotos profile={profile} />,\r\n        },\r\n        {\r\n            menuItem: \"Events\",\r\n            render: () => <Tab.Pane>Events Content</Tab.Pane>,\r\n        },\r\n        {\r\n            menuItem: \"Followers\",\r\n            render: () => (\r\n                <Tab.Pane>\r\n                    <ProfileFollowings />\r\n                </Tab.Pane>\r\n            ),\r\n        },\r\n        {\r\n            menuItem: \"Following\",\r\n            render: () => (\r\n                <Tab.Pane>\r\n                    <ProfileFollowings />\r\n                </Tab.Pane>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition=\"right\"\r\n            panes={panes}\r\n            onTabChange={(e, data) =>\r\n                profileStore.setActiveTab(data.activeIndex)\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default observer(ProfileContent);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {\r\n    Divider,\r\n    Grid,\r\n    Header,\r\n    Item,\r\n    Segment,\r\n    Statistic,\r\n} from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\nexport interface Props {\r\n    profile: Profile;\r\n}\r\n\r\nconst ProfileHeader: React.FC<Props> = ({ profile }) => {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image\r\n                                avatar\r\n                                size=\"small\"\r\n                                src={profile.image || \"/assets/user.png\"}\r\n                            />\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Header as=\"h1\" content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic\r\n                            label=\"Followers\"\r\n                            value={profile.followersCount}\r\n                        />\r\n                        <Statistic\r\n                            label=\"Following\"\r\n                            value={profile.followingCount}\r\n                        />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport interface Props {}\r\n\r\nconst ProfilePage: React.FC<Props> = () => {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, profile, loadProfile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        };\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content=\"Loading profile\" />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && (\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />{\" \"}\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePage);\r\n","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component:\r\n        | React.ComponentType<RouteComponentProps<any>>\r\n        | React.ComponentType<any>;\r\n}\r\n\r\nconst PrivateRoute: React.FC<Props> = ({ component: Component, ...rest }) => {\r\n    const {\r\n        userStore: { isLoggedIn },\r\n    } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) =>\r\n                isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { Container } from \"semantic-ui-react\";\nimport NavBar from \"./NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport { observer } from \"mobx-react-lite\";\nimport { Route, useLocation, Switch } from \"react-router-dom\";\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport HomePage from \"../../features/home/HomePage\";\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\nimport TestErrors from \"../../features/errors/TestError\";\nimport { ToastContainer } from \"react-toastify\";\nimport NotFound from \"../../features/errors/NotFound\";\nimport ServerError from \"../../features/errors/ServerError\";\nimport { useStore } from \"../stores/store\";\nimport { useEffect } from \"react\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nfunction App() {\n    const location = useLocation();\n    const { commonStore, userStore } = useStore();\n\n    useEffect(() => {\n        if (commonStore.token) {\n            userStore.getUser().finally(() => commonStore.setAppLoaded());\n        } else {\n            commonStore.setAppLoaded();\n        }\n    }, [commonStore, userStore]);\n\n    if (!commonStore.appLoaded)\n        return <LoadingComponent content=\"Loading App...\" />;\n\n    return (\n        <>\n            <ToastContainer position=\"bottom-right\" hideProgressBar />\n            <ModalContainer />\n            <Route exact path=\"/\" component={HomePage} />\n            <Route\n                path={\"/(.+)\"}\n                render={() => (\n                    <>\n                        <NavBar />\n                        <Container style={{ marginTop: \"7em\" }}>\n                            <Switch>\n                                <PrivateRoute\n                                    exact\n                                    path=\"/activities\"\n                                    component={ActivityDashboard}\n                                />\n                                <PrivateRoute\n                                    path=\"/activities/:id\"\n                                    component={ActivityDetails}\n                                />\n                                <PrivateRoute\n                                    key={location.key}\n                                    path={[\"/createActivity\", \"/manage/:id\"]}\n                                    component={ActivityForm}\n                                />\n                                <PrivateRoute\n                                    path=\"/profiles/:username\"\n                                    component={ProfilePage}\n                                />\n                                <Route path=\"/errors\" component={TestErrors} />\n                                <Route\n                                    path=\"/server-error\"\n                                    component={ServerError}\n                                />\n                                <Route component={NotFound} />\n                            </Switch>\n                        </Container>\n                    </>\n                )}\n            />\n        </>\n    );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst ScrollToTop = () => {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"./app/layout/styles.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport App from \"./app/layout/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store, StoreContext } from \"./app/stores/store\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <ScrollToTop />\n            <App />\n        </Router>\n    </StoreContext.Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}